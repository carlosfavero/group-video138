{"version":3,"sources":["routes/CreateRoom.js","routes/Room.js","App.js","serviceWorker.js","index.js"],"names":["CreateRoom","props","onClick","id","uuid","history","push","Container","styled","div","StyledVideo","video","attrs","muted","Video","ref","useRef","useEffect","peer","on","stream","current","srcObject","console","log","playsInline","autoPlay","videoConstraints","height","window","innerHeight","width","innerWidth","Room","useState","peers","setPeers","socketRef","userVideo","peersRef","roomID","match","params","io","connect","navigator","mediaDevices","getUserMedia","audio","then","emit","users","forEach","userID","userToSignal","callerID","Peer","initiator","trickle","signal","createPeer","peerID","payload","incomingSignal","addPeer","peerObj","find","p","destroy","filter","map","key","App","path","exact","component","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b751c97.chunk.js","sourcesContent":["import React from \"react\";\nimport { v1 as uuid } from \"uuid\";\n\nconst CreateRoom = (props) => {\n    function create() {\n        const id = uuid();\n        props.history.push(`/room/${id}`);\n    }\n\n    return (\n        <button onClick={create}>Create room</button>\n    );\n};\n\nexport default CreateRoom;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport io from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    padding: 20px;\n    display: flex;\n    height: 100vh;\n    width: 90%;\n    margin: auto;\n    flex-wrap: wrap;\n`;\n\nconst StyledVideo = styled.video.attrs(({muted}) => ({\n    muted: muted\n}))`\n    height: 40%;\n    width: 50%;\n    border-color: ${props => (props.muted ? \"red\" : \"blue\")};\n`;\n\nconst Video = (props) => {\n    const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            ref.current.srcObject = stream;\n            console.log(ref.current.srcObject);            \n        })\n    }, []);\n    \n    return (\n        <StyledVideo muted={props.muted} playsInline autoPlay ref={ref} />\n    );\n}\n\nconst videoConstraints = {\n    height: window.innerHeight / 3,\n    width: window.innerWidth / 3\n};\n\nconst Room = (props) => {\n    const [peers, setPeers] = useState([]);\n    const socketRef = useRef();\n    const userVideo = useRef();\n    const peersRef = useRef([]);\n    const roomID = props.match.params.roomID;\n\n    useEffect(() => {\n        socketRef.current = io.connect(\"/\");\n        navigator.mediaDevices.getUserMedia({ video: videoConstraints, audio: true }).then(stream => {\n            userVideo.current.srcObject = stream;\n            socketRef.current.emit(\"join room\", roomID);\n            socketRef.current.on(\"all users\", users => {\n                const peers = [];\n                users.forEach(userID => {\n                    const peer = createPeer(userID, socketRef.current.id, stream);\n                    peersRef.current.push({\n                        peerID: userID,\n                        peer,\n                    })\n                    peers.push({\n                        peerID: userID,\n                        peer,\n                    });\n                })\n                setPeers(peers);\n            })\n\n            socketRef.current.on(\"user joined\", payload => {\n                const peer = addPeer(payload.signal, payload.callerID, stream);\n                peersRef.current.push({\n                    peerID: payload.callerID,\n                    peer,\n                })\n\n                const peerObj = {\n                    peerID: payload.callerID,\n                    peer,                    \n                };\n\n                setPeers(users => [...users, peerObj]);\n            });\n\n            socketRef.current.on(\"receiving returned signal\", payload => {\n                const item = peersRef.current.find(p => p.peerID === payload.id);\n                item.peer.signal(payload.signal);\n            });\n           \n            socketRef.current.on('user left', id =>{\n                const peerObj = peersRef.current.find(p => p.peerID === id);\n                if(peerObj){\n                    peerObj.peer.destroy();                    \n                }\n                const peers = peersRef.current.filter(p => p.peerID !== id);\n                peersRef.current = peers;\n                setPeers(peers);\n            });\n        })\n    }, []);\n\n    function createPeer(userToSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream,\n        });\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\n        })\n\n        return peer;\n    }\n\n    function addPeer(incomingSignal, callerID, stream) {\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream,\n        })\n\n        peer.on(\"signal\", signal => {\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\n        })\n\n        peer.signal(incomingSignal);\n\n        return peer;\n    }\n\n    function stop (stream,enable) {\n        if (stream) {\n            for (var i = 0; i < stream.getTracks().length; i++) {\n                var track = stream.getAudioTracks()[0];\n                if (track)\n                    track.enabled = enable;\n                //track.stop();\n            }\n        }\n    };\n\n    return (\n        <Container>\n            <StyledVideo muted={true} ref={userVideo} autoPlay playsInline/>\n            {peers.map((peer) => {\n                return (\n                    <Video key={peer.peerID} peer={peer.peer} muted={true}/>                    \n                );\n            })}\n        </Container>\n    );\n};\n\nexport default Room;\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport CreateRoom from \"./routes/CreateRoom\";\nimport Room from \"./routes/Room\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path=\"/\" exact component={CreateRoom} />\n        <Route path=\"/room/:roomID\" component={Room} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}